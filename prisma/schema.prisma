generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  name               String
  password           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  isActive           Boolean  @default(true)
  resetPasswordToken String?
  maxLinks           Int      @default(50)
  links              Link[]

  totalClicks Int @default(0)
}

model Link {
  id          String    @id @default(cuid())
  userId      String
  originalUrl String    @db.Text
  shortCode   String    @unique
  title       String?
  description String?   @db.Text
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  password    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  time        Int       @default(0)

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  clicks Click[]
  tags   TagsOnLinks[]

  totalClicks Int @default(0)
}

model Click {
  id        String   @id @default(cuid())
  linkId    String
  timestamp DateTime @default(now())

  ip              String?
  userAgent       String? @db.Text
  country         String?
  city            String?
  device          String?
  browser         String?
  operatingSystem String?

  link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  createdAt DateTime      @default(now())
  isActive  Boolean       @default(true)
  links     TagsOnLinks[]
}

model TagsOnLinks {
  linkId     String
  tagId      String
  assignedAt DateTime @default(now())

  link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([linkId, tagId])
}
